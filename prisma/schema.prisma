generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  reviews  Review[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @map("refreshToken") @db.Text
  refresh_token_expires_in Int?    @map("refreshTokenExpiresIn")
  access_token             String? @map("accessToken") @db.Text
  expires_at               Int?    @map("expiresAt")
  token_type               String? @map("tokenType")
  scope                    String?
  id_token                 String? @map("idToken") @db.Text
  session_state            String? @map("sessionState")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id       String @id @default(cuid())
  remoteId String @unique
  slug     String @unique
  name     String

  models Model[]
}

model Model {
  id               String   @id @default(cuid())
  remoteId         String   @unique
  slug             String
  name             String
  lastModifiedDate DateTime
  numParameters    Int?
  arch             String
  license          String?
  ggufId           String
  authorId         String

  // Benchmarks
  average    Float?
  arc        Float?
  hellaswag  Float?
  mmlu       Float?
  truthfulqa Float?
  drop       Float?
  gsm8k      Float?
  winogrande Float?

  // Aggregate info
  avgStars         Float?
  numReviews       Int?
  numHumanFeedback Int?

  files         File[]
  reviews       Review[]
  author        Author          @relation(fields: [authorId], references: [id])
  humanFeedback HumanFeedback[]

  @@index([authorId])
}

model File {
  id           String @id @default(cuid())
  name         String @unique
  quantization String
  format       String

  modelId String
  model   Model  @relation(fields: [modelId], references: [id])

  @@index([modelId])
}

model Review {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  stars        Int
  text         String   @db.LongText
  externalName String?
  externalUrl  String?
  userId       String
  modelId      String

  model Model @relation(fields: [modelId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([modelId])
  @@index([userId])
}

model HumanFeedback {
  id               String                 @id @default(cuid())
  createdAt        DateTime               @default(now())
  modelName        String
  promptTemplate   String
  lastSystemPrompt String
  client           String
  messages         HumanFeedbackMessage[]

  // we connect with a model if we find one via the modelName
  modelId String?
  model   Model?  @relation(fields: [modelId], references: [id])

  @@index([modelId])
}

model HumanFeedbackMessage {
  id              String        @id @default(cuid())
  index           Int
  fromUser        Boolean
  text            String        @db.LongText
  humanFeedbackId String
  humanFeedback   HumanFeedback @relation(fields: [humanFeedbackId], references: [id])

  @@index([humanFeedbackId])
}
